# .github/workflows/build.yml

name: Build EXE with Caching and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # שלב חדש: הגדרת מטמון עבור התלויות של Pip
      - name: Cache Pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~\pip\Cache # מיקום המטמון של Pip בווינדוס
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # שלב חדש: הגדרת מטמון עבור הקבצים הבינאריים החיצוניים
      - name: Cache external binaries
        id: cache-binaries
        uses: actions/cache@v4
        with:
          path: ./ext-tools # נשמור את הקבצים בתיקייה ייעודית
          key: ${{ runner.os }}-binaries-v1 # מפתח סטטי. שנה ל-v2 אם תרצה לרענן את המטמון

      # הורדת הקבצים רק אם הם לא נמצאו במטמון
      - name: Download binaries if cache miss
        if: steps.cache-binaries.outputs.cache-hit != 'true'
        run: |
          $baseUrl = "https://github.com/AMAARETS/files/releases/download/v1"
          New-Item -ItemType Directory -Force -Path "./ext-tools"
          Write-Host "Cache not found. Downloading binaries..."
          Invoke-WebRequest -Uri "$baseUrl/apktool.jar" -OutFile "./ext-tools/apktool.jar"
          Invoke-WebRequest -Uri "$baseUrl/apksigner.jar" -OutFile "./ext-tools/apksigner.jar"
          Invoke-WebRequest -Uri "$baseUrl/key.jks" -OutFile "./ext-tools/key.jks"
          Invoke-WebRequest -Uri "$baseUrl/jre.zip" -OutFile "./ext-tools/jre.zip"
          Write-Host "All files downloaded successfully."
        shell: pwsh

      # חילוץ ה-JRE רק אם הורדנו אותו (כלומר, לא היה במטמון)
      - name: Extract JRE if cache miss
        if: steps.cache-binaries.outputs.cache-hit != 'true'
        run: |
          Expand-Archive -Path './ext-tools/jre.zip' -DestinationPath './ext-tools/'
          Write-Host "JRE extracted successfully."
        shell: pwsh

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # ההתקנה תהיה מהירה מאוד אם המטמון קיים
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Build with PyInstaller
        run: |
          # שים לב שהנתיבים לקבצים עודכנו לתיקיית ext-tools
          pyinstaller --name "APKTranslator" `
            --onefile `
            --windowed `
            --add-data "./ext-tools/apktool.jar;." `
            --add-data "./ext-tools/apksigner.jar;." `
            --add-data "./ext-tools/key.jks;." `
            --add-data "./ext-tools/jre;jre" `
            ApkTranslator.py # !!! החלף כאן בשם הסקריפט שלך

      - name: Create Release and Upload EXE
        uses: softprops/action-gh-release@v1
        with:
          files: dist/APKTranslator.exe
          tag_name: "v${{ github.run_number }}"
          name: "Release v${{ github.run_number }}"
          body: "Automated release of APKTranslator, built with cached binaries."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# .github/workflows/build.yml

name: Build EXE with Caching and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # שימוש ב-setup-python עם יכולת מטמון מובנית
      - name: Set up Python with dependency caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          # זה החלק החשוב: הוא מנהל את מטמון ה-pip באופן אוטומטי ואמין
          cache: 'pip'

      # הגדרת מטמון עבור הקבצים הבינאריים
      - name: Cache external binaries
        id: cache-binaries
        uses: actions/cache@v4
        with:
          # נשמור את הקבצים בתיקייה ייעודית. חשוב ליצור אותה לפני
          path: ./ext-tools
          key: ${{ runner.os }}-binaries-v1

      # יצירת תיקיית הכלים לפני ההורדה
      - name: Create external tools directory
        run: New-Item -ItemType Directory -Force -Path "./ext-tools"

      # הורדת הקבצים רק אם הם לא נמצאו במטמון
      - name: Download binaries if cache miss
        if: steps.cache-binaries.outputs.cache-hit != 'true'
        run: |
          $baseUrl = "https://github.com/AMAARETS/files/releases/download/v1"
          Write-Host "Cache not found. Downloading binaries..."
          Invoke-WebRequest -Uri "$baseUrl/apktool.jar" -OutFile "./ext-tools/apktool.jar"
          Invoke-WebRequest -Uri "$baseUrl/apksigner.jar" -OutFile "./ext-tools/apksigner.jar"
          Invoke-WebRequest -Uri "$baseUrl/key.jks" -OutFile "./ext-tools/key.jks"
          Invoke-WebRequest -Uri "$baseUrl/jre.zip" -OutFile "./ext-tools/jre.zip"
          Write-Host "All files downloaded successfully."
        shell: pwsh

      # חילוץ ה-JRE ישירות לתיקייה הנכונה
      - name: Extract JRE from downloaded zip
        run: |
          # נחלץ רק אם קובץ ה-zip קיים (כלומר, הורדנו אותו או שוחזר מהמטמון)
          if (Test-Path ./ext-tools/jre.zip) {
            Expand-Archive -Path './ext-tools/jre.zip' -DestinationPath './ext-tools/' -Force
            # נמחק את ה-zip לאחר החילוץ כדי לחסוך מקום במטמון
            Remove-Item './ext-tools/jre.zip'
            Write-Host "JRE extracted successfully."
          } else {
            Write-Host "JRE folder already exists in cache. Skipping extraction."
          }
        shell: pwsh

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # ההתקנה תהיה מהירה מאוד בזכות המטמון המובנה של setup-python
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Build with PyInstaller
        run: |
          pyinstaller --name "APKTranslator" `
            --onefile `
            --windowed `
            --add-data "./ext-tools/apktool.jar;." `
            --add-data "./ext-tools/apksigner.jar;." `
            --add-data "./ext-tools/key.jks;." `
            --add-data "./ext-tools/jre;jre" `
            ApkTranslator.py # !!! החלף כאן בשם הסקריפט שלך

      - name: Create Release and Upload EXE
        uses: softprops/action-gh-release@v1
        with:
          files: dist/APKTranslator.exe
          tag_name: "v${{ github.run_number }}"
          name: "Release v${{ github.run_number }}"
          body: "Automated release of APKTranslator, built with cached binaries."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
